name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    runs-on: arc-runner-set
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup BuildKit rootless
        run: |
          # Crear directorio para BuildKit
          mkdir -p $HOME/.local/bin
          
          # Descargar y extraer BuildKit
          curl -L https://github.com/moby/buildkit/releases/download/v0.16.0/buildkit-v0.16.0.linux-amd64.tar.gz | tar -xz -C /tmp
          
          # Copiar binarios
          cp /tmp/bin/* $HOME/.local/bin/
          chmod +x $HOME/.local/bin/*
          
          # Agregar al PATH para futuros pasos
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          
          # Configurar PATH para este paso
          export PATH="$HOME/.local/bin:$PATH"
          
          # Verificar instalación
          ls -la $HOME/.local/bin/
          $HOME/.local/bin/buildctl --version

      - name: Extract version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION=${{ github.event.inputs.tag }}
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_clean=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Generate tags and labels
        id: meta
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          VERSION="${{ steps.version.outputs.version }}"
          VERSION_CLEAN="${{ steps.version.outputs.version_clean }}"
          
          # Tags semánticos para release
          TAGS="$IMAGE_NAME:$VERSION_CLEAN"
          TAGS="$TAGS,$IMAGE_NAME:latest"
          
          # Si es versión semántica, agregar tags adicionales
          if [[ $VERSION_CLEAN =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            MAJOR=$(echo $VERSION_CLEAN | cut -d. -f1)
            MINOR=$(echo $VERSION_CLEAN | cut -d. -f1-2)
            TAGS="$TAGS,$IMAGE_NAME:$MAJOR,$IMAGE_NAME:$MINOR"
          fi
          
          # Labels estándar OCI
          LABELS="org.opencontainers.image.title=${{ github.repository }}"
          LABELS="$LABELS,org.opencontainers.image.description=Pangolin Operator for Kubernetes"
          LABELS="$LABELS,org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}"
          LABELS="$LABELS,org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}"
          LABELS="$LABELS,org.opencontainers.image.version=$VERSION_CLEAN"
          LABELS="$LABELS,org.opencontainers.image.revision=${{ github.sha }}"
          LABELS="$LABELS,org.opencontainers.image.created=$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "labels=$LABELS" >> $GITHUB_OUTPUT

      - name: Set up registry credentials
        run: |
          mkdir -p ~/.docker
          echo "{\"auths\":{\"${{ env.REGISTRY }}\":{\"username\":\"${{ github.actor }}\",\"password\":\"${{ secrets.GITHUB_TOKEN }}\"}}}" > ~/.docker/config.json

      - name: Start BuildKit daemon rootless
        run: |
          # Crear directorio para datos de buildkit
          mkdir -p $HOME/.local/share/buildkit
          
          # Iniciar buildkitd en modo rootless en background
          $HOME/.local/bin/buildkitd --addr unix://$HOME/buildkit.sock --root $HOME/.local/share/buildkit --oci-worker-no-process-sandbox &
          
          # Esperar a que el daemon esté listo
          sleep 10
          
          # Verificar conexión
          $HOME/.local/bin/buildctl --addr unix://$HOME/buildkit.sock debug info

      - name: Build and push with BuildKit rootless
        id: build
        run: |
          # Preparar tags para BuildKit
          IFS=',' read -ra TAG_ARRAY <<< "${{ steps.meta.outputs.tags }}"
          TAG_ARGS=""
          for tag in "${TAG_ARRAY[@]}"; do
            TAG_ARGS="$TAG_ARGS --output type=image,name=$tag,push=true"
          done
          
          # Preparar labels para BuildKit
          IFS=',' read -ra LABEL_ARRAY <<< "${{ steps.meta.outputs.labels }}"
          LABEL_ARGS=""
          for label in "${LABEL_ARRAY[@]}"; do
            LABEL_ARGS="$LABEL_ARGS --opt label:$label"
          done
          
          # Construir y subir con BuildKit
          $HOME/.local/bin/buildctl --addr unix://$HOME/buildkit.sock build \
            --frontend dockerfile.v0 \
            --local context=. \
            --local dockerfile=. \
            --opt build-arg:BUILDKIT_INLINE_CACHE=1 \
            $LABEL_ARGS \
            $TAG_ARGS

      - name: Get image digest
        id: digest
        run: |
          # Obtener el digest de la imagen construida
          MAIN_TAG=$(echo "${{ steps.meta.outputs.tags }}" | cut -d',' -f1)
          # Obtener digest de la imagen local
          DIGEST=$($HOME/.local/bin/buildctl --addr unix://$HOME/buildkit.sock imagetools inspect --raw $MAIN_TAG | jq -r '.manifests[0].digest // .digest' 2>/dev/null || echo "sha256:unknown")
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.digest.outputs.digest }}
          push-to-registry: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## Docker Images
            
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version_clean }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
            
            ## What's Changed
            
            Full Changelog: https://github.com/${{ github.repository }}/compare/${{ steps.version.outputs.version }}...HEAD

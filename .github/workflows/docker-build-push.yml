name: Build and Push Docker Image

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (optional for manual builds)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: arc-runner-set
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version info
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.tag }}" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="manual-$(date +%Y%m%d-%H%M%S)"
          fi
          VERSION_CLEAN=${VERSION#v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_clean=${VERSION_CLEAN}" >> $GITHUB_OUTPUT
          echo "is_release=${{ startsWith(github.ref, 'refs/tags/') }}" >> $GITHUB_OUTPUT

      - name: Generate tags and labels
        id: meta
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          VERSION_CLEAN="${{ steps.version.outputs.version_clean }}"
          
          # Generar tags basados en el tipo de build
          if [[ "${{ steps.version.outputs.is_release }}" == "true" ]]; then
            # Es un release oficial
            TAGS="$IMAGE_NAME:$VERSION_CLEAN,$IMAGE_NAME:latest"
            
            # Si es versión semántica, agregar tags adicionales
            if [[ $VERSION_CLEAN =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              MAJOR=$(echo $VERSION_CLEAN | cut -d. -f1)
              MINOR=$(echo $VERSION_CLEAN | cut -d. -f1-2)
              TAGS="$TAGS,$IMAGE_NAME:$MAJOR,$IMAGE_NAME:$MINOR"
            fi
          else
            # Build manual o con tag custom
            TAGS="$IMAGE_NAME:$VERSION_CLEAN"
            if [[ "$VERSION_CLEAN" != "latest" && "$VERSION_CLEAN" != manual-* ]]; then
              TAGS="$TAGS,$IMAGE_NAME:latest"
            fi
          fi
          
          # Labels estándar OCI
          LABELS="org.opencontainers.image.title=${{ github.repository }}"
          LABELS="$LABELS,org.opencontainers.image.description=Pangolin Operator for Kubernetes"
          LABELS="$LABELS,org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}"
          LABELS="$LABELS,org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}"
          LABELS="$LABELS,org.opencontainers.image.revision=${{ github.sha }}"
          LABELS="$LABELS,org.opencontainers.image.created=$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "labels=$LABELS" >> $GITHUB_OUTPUT

      - name: Set up registry credentials
        run: |
          mkdir -p $HOME/.docker
          echo "{\"auths\":{\"${{ env.REGISTRY }}\":{\"username\":\"${{ github.actor }}\",\"password\":\"${{ secrets.GITHUB_TOKEN }}\"}}}" > $HOME/.docker/config.json

      - name: Build and push with Kaniko
        run: |
          # Preparar argumentos para Kaniko
          IFS=',' read -ra TAG_ARRAY <<< "${{ steps.meta.outputs.tags }}"
          DESTINATIONS=""
          for tag in "${TAG_ARRAY[@]}"; do
            DESTINATIONS="$DESTINATIONS --destination=$tag"
          done
          
          # Preparar labels para Kaniko
          IFS=',' read -ra LABEL_ARRAY <<< "${{ steps.meta.outputs.labels }}"
          LABEL_ARGS=""
          for label in "${LABEL_ARRAY[@]}"; do
            LABEL_ARGS="$LABEL_ARGS --label=$label"
          done
          
          # Verificar si docker está disponible, si no usar podman
          if command -v docker >/dev/null 2>&1; then
            CONTAINER_CMD="docker"
          elif command -v podman >/dev/null 2>&1; then
            CONTAINER_CMD="podman"
          else
            echo "Neither docker nor podman found. Installing podman..."
            # Para sistemas basados en Debian/Ubuntu
            sudo apt-get update && sudo apt-get install -y podman
            CONTAINER_CMD="podman"
          fi
          
          # Construir y subir con Kaniko usando el runtime disponible
          $CONTAINER_CMD run --rm \
            -v $PWD:/workspace \
            -v $HOME/.docker:/kaniko/.docker:ro \
            -w /workspace \
            gcr.io/kaniko-project/executor:debug \
            --context=/workspace \
            --dockerfile=/workspace/Dockerfile \
            --cache=true \
            --cache-ttl=24h \
            --build-arg=BUILDKIT_INLINE_CACHE=1 \
            $LABEL_ARGS \
            $DESTINATIONS

      - name: Get image digest
        id: digest
        run: |
          # Obtener el primer tag construido para extraer el digest
          MAIN_TAG=$(echo "${{ steps.meta.outputs.tags }}" | cut -d',' -f1)
          echo "main_tag=$MAIN_TAG" >> $GITHUB_OUTPUT
          # Por ahora usamos un placeholder hasta que Kaniko exponga el digest
          echo "digest=sha256:placeholder" >> $GITHUB_OUTPUT

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.digest.outputs.digest }}
          push-to-registry: true

      - name: Create GitHub Release
        if: steps.version.outputs.is_release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## 🐳 Docker Images
            
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version_clean }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
            
            ## 🚀 Installation
            
            ```bash
            # Pull the image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version_clean }}
            
            # Deploy to Kubernetes
            kubectl apply -f https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/deployment.yaml
            ```
            
            ## 📋 What's Changed
            
            See the full changelog below.

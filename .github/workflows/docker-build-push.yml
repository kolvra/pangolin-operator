name: Build and Push Docker Image

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: arc-runner-set
    container:
      image: moby/buildkit:rootless
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Set up Docker credentials
        run: |
          mkdir -p ~/.docker
          echo "{\"auths\":{\"${{ env.REGISTRY }}\":{\"username\":\"${{ github.actor }}\",\"password\":\"${{ secrets.GITHUB_TOKEN }}\"}}}" > ~/.docker/config.json

      - name: Build and push with BuildKit rootless
        id: build
        run: |
          # Preparar tags para BuildKit
          TAGS="${{ steps.meta.outputs.tags }}"
          TAG_ARGS=""
          for tag in $TAGS; do
            TAG_ARGS="$TAG_ARGS --output type=image,name=$tag,push=true"
          done
          
          # Construir y subir con BuildKit
          buildctl-daemonless.sh build \
            --frontend dockerfile.v0 \
            --local context=. \
            --local dockerfile=. \
            --opt build-arg:BUILDKIT_INLINE_CACHE=1 \
            $TAG_ARGS

      - name: Get image digest
        id: digest
        run: |
          # Obtener el digest de la imagen construida
          MAIN_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          DIGEST=$(buildctl-daemonless.sh imagetools inspect --raw $MAIN_TAG | sha256sum | cut -d' ' -f1)
          echo "digest=sha256:$DIGEST" >> $GITHUB_OUTPUT

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.digest.outputs.digest }}
          push-to-registry: true

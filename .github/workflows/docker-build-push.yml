name: Build and Push Docker Image

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: arc-runner-set
    container:
      image: moby/buildkit:rootless
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate tags and labels
        id: meta
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          
          # Determinar tags basados en el evento
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Es un tag, extraer versión
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION_CLEAN=${VERSION#v}
            
            # Tags semánticos
            TAGS="$IMAGE_NAME:$VERSION_CLEAN"
            TAGS="$TAGS,$IMAGE_NAME:latest"
            
            # Si es versión semántica, agregar tags adicionales
            if [[ $VERSION_CLEAN =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              MAJOR=$(echo $VERSION_CLEAN | cut -d. -f1)
              MINOR=$(echo $VERSION_CLEAN | cut -d. -f1-2)
              TAGS="$TAGS,$IMAGE_NAME:$MAJOR,$IMAGE_NAME:$MINOR"
            fi
          else
            # Workflow manual, solo latest
            TAGS="$IMAGE_NAME:latest"
          fi
          
          # Labels estándar OCI
          LABELS="org.opencontainers.image.title=${{ github.repository }}"
          LABELS="$LABELS,org.opencontainers.image.description=Pangolin Operator for Kubernetes"
          LABELS="$LABELS,org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}"
          LABELS="$LABELS,org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}"
          LABELS="$LABELS,org.opencontainers.image.revision=${{ github.sha }}"
          LABELS="$LABELS,org.opencontainers.image.created=$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "labels=$LABELS" >> $GITHUB_OUTPUT

      - name: Set up Docker credentials
        run: |
          mkdir -p ~/.docker
          echo "{\"auths\":{\"${{ env.REGISTRY }}\":{\"username\":\"${{ github.actor }}\",\"password\":\"${{ secrets.GITHUB_TOKEN }}\"}}}" > ~/.docker/config.json

      - name: Build and push with BuildKit rootless
        id: build
        run: |
          # Preparar tags para BuildKit
          IFS=',' read -ra TAG_ARRAY <<< "${{ steps.meta.outputs.tags }}"
          TAG_ARGS=""
          for tag in "${TAG_ARRAY[@]}"; do
            TAG_ARGS="$TAG_ARGS --output type=image,name=$tag,push=true"
          done
          
          # Preparar labels para BuildKit
          IFS=',' read -ra LABEL_ARRAY <<< "${{ steps.meta.outputs.labels }}"
          LABEL_ARGS=""
          for label in "${LABEL_ARRAY[@]}"; do
            LABEL_ARGS="$LABEL_ARGS --opt label:$label"
          done
          
          # Construir y subir con BuildKit
          buildctl-daemonless.sh build \
            --frontend dockerfile.v0 \
            --local context=. \
            --local dockerfile=. \
            --opt build-arg:BUILDKIT_INLINE_CACHE=1 \
            $LABEL_ARGS \
            $TAG_ARGS

      - name: Get image digest
        id: digest
        run: |
          # Obtener el digest de la imagen construida
          MAIN_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          DIGEST=$(buildctl-daemonless.sh imagetools inspect --raw $MAIN_TAG | sha256sum | cut -d' ' -f1)
          echo "digest=sha256:$DIGEST" >> $GITHUB_OUTPUT

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.digest.outputs.digest }}
          push-to-registry: true
